b)

$< :
This symbol is required as a prior condition for others to happen
C compilation typically takes a.c file and makes a.o file. So make applies the implicit rule for C compilation when it sees this combination of file name ending.
If the running file takes recipe from our make file having compling code, this will be the the first priority.


$@ :

$a is the name of whichever target caused the ruleâ€™s recipe to be run
The file name of the target of the rule in a pattern rule that has multiple targets.



$^ :
The names of all the prerequisites, with spaces between them. 
A target has only one prerequisite on each other file it depends on, no matter how many times each file is listed as a prerequisite.
So if we list a prerequisite more than once for a target, the value of $^ contains just one copy of the name.
This list does not contain any of the order-only prerequisites.


For example, consider the following declaration:

all: library.c main.c

$@: evaluates to all
$<: evaluates to library.c
$^: evaluates to library.c main.c


C)


We can make files of different extensions

for example file1.win and file2.nix

make -f file1.win
make -f file2.nix


and then have a Makefile that contains:

win:
  make -f file1.win

nix:
  make -f file2.nix

and use make win or make nix

d)
Files : Attached

sqrt.c includes sqrt.h which contains header files of using function atoi() of stdlib.h and other stdio.h file in sqrt.h


